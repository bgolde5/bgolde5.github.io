<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Bradley Golden</title>
 <link href="http://bradleygolden.github.io/atom.xml" rel="self"/>
 <link href="http://bradleygolden.github.io/"/>
 <updated>2016-04-16T07:38:48-05:00</updated>
 <id>http://bradleygolden.github.io</id>
 <author>
   <name>Bradley Golden</name>
   <email>golden.bradley@gmail.com</email>
 </author>

 
 <entry>
   <title>Documenting Your Code in Xcode</title>
   <link href="http://bradleygolden.github.io/post/2016/03/04/documenting-your-code-in-xcode/"/>
   <updated>2016-03-04T00:00:00-06:00</updated>
   <id>http://bradleygolden.github.io/post/2016/03/04/documenting-your-code-in-xcode</id>
   <content type="html">&lt;p&gt;As a developer I’m always trying to balance my time between coding and commenting. I’d prefer to spend as little amount of time as possible commenting my code while at the time time, maximizing the usefulness of my comments. With that said, I’d like to share &lt;a href=&quot;https://github.com/onevcat/VVDocumenter-Xcode&quot;&gt;VVDocumenter-Xcode&lt;/a&gt; with you.&lt;/p&gt;

&lt;p&gt;VVDocumenter takes advantage of Xcode’s commenting markup language by generating comment stubs for you by simply typing three forward slashes “///” above a parameter, method, etc.&lt;/p&gt;

&lt;iframe src=&quot;https://drive.google.com/file/d/0B3O6dpa-XnSYSmthazB3MFlIbEk/preview&quot; width=&quot;400&quot; height=&quot;150&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;
If you’re not familiar with Xcode’s commenting markup language, please visit &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/HeaderDoc/tags/tags.html#//apple_ref/doc/uid/TP40001215-CH346-CHDJFEGF&quot;&gt;this&lt;/a&gt; website for Objective-C or &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html#//apple_ref/doc/uid/TP40016497-CH2-SW1&quot;&gt;this&lt;/a&gt; website for Swift. If you’re familiar with Javadocs, Xcode’s markup language for Objective C and Swift is very similar.&lt;/p&gt;

&lt;p&gt;Lastly, the final question is, why care about commenting code in a particular way? In Xcode, if you use the option key and hover over a method, you’ll see a question mark appear and the method will highlight blue. If you click a properly commented method, you’ll see something like this:&lt;/p&gt;

&lt;iframe src=&quot;https://drive.google.com/file/d/0B3O6dpa-XnSYLXVsSmt4dWlxU0E/preview&quot; width=&quot;400&quot; height=&quot;150&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;
Pretty right? Now for the icing on the cake…. An open source project called &lt;a href=&quot;https://github.com/realm/jazzy&quot;&gt;Jazzy&lt;/a&gt; is gaining momentum. Jazzy is very similar to Javadocs in the sense that it produces a very pretty html document similar to Apple’s standard documentation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/realm/jazzy/blob/master/screenshot.jpg?raw=true&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the combination of the Apple’s markup language, VVDocumenter and Jazzy, you now have a powerful toolset to comment your code and produce professional documentation with minimal effort!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Appium vs. Xcode's XCTest</title>
   <link href="http://bradleygolden.github.io/post/2016/03/03/appium-vs-xcodes-xctest/"/>
   <updated>2016-03-03T00:00:00-06:00</updated>
   <id>http://bradleygolden.github.io/post/2016/03/03/appium-vs-xcodes-xctest</id>
   <content type="html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;With the current competitive nature of the App Store, it’s important to know whether your app is functioning exactly how you expect it to. Therefore, it’s very important to test your app thoroughly using both unit tests and acceptance tests. In this post I will outline two very important tools for acceptance testing, Appium and Xcode’s XCTest framework.&lt;/p&gt;

&lt;h2 id=&quot;why-acceptance-testing&quot;&gt;Why acceptance testing?&lt;/h2&gt;
&lt;p&gt;Acceptance testing ensures that the user experience is solid and that your app is functioning as expected. Without acceptance testing, you must conduct manual tests that are both time consuming and dependent on the developer. Acceptance tests allow for developers to automate the testing process and use tools such as “Continuous Integration” (CI).&lt;/p&gt;

&lt;h2 id=&quot;the-acceptance-testing-lifecycle&quot;&gt;The Acceptance Testing Lifecycle&lt;/h2&gt;
&lt;p&gt;It’s important to decide the workflow for testing your apps. Below is an example of the ATDD (Acceptance Test Driven Development) workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create user experience/story and covert to acceptance tests&lt;/li&gt;
  &lt;li&gt;Write/Run acceptance tests (they will fail)&lt;/li&gt;
  &lt;li&gt;Code the app&lt;/li&gt;
  &lt;li&gt;Track acceptance tests as they begin to pass&lt;/li&gt;
  &lt;li&gt;Watch all acceptance tests pass&lt;/li&gt;
  &lt;li&gt;Release app&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;which-frameworks-should-i-consider&quot;&gt;Which frameworks should I consider?&lt;/h2&gt;
&lt;p&gt;Given the newest release of UI automated testing to Xcode’s XCTest, Xcode is now a large competitor in acceptance testing. However, there are many other frameworks to consider as well that have been tested thoroughly and have a large following. Below is a list of a few:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Appium&lt;/li&gt;
  &lt;li&gt;Xcode’s XCTest&lt;/li&gt;
  &lt;li&gt;Calabash&lt;/li&gt;
  &lt;li&gt;Frank&lt;/li&gt;
  &lt;li&gt;And more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going to cover Appium and Xcode only for this post because personally, I’ve found these two to be the most convenient for mobile developers with little to no web experience or knowledge of ruby.&lt;/p&gt;

&lt;h2 id=&quot;appium&quot;&gt;Appium&lt;/h2&gt;
&lt;p&gt;This framework is tried and tested by many companies.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s open source&lt;/li&gt;
  &lt;li&gt;Uses Selenium and the WebDriver protocol&lt;/li&gt;
  &lt;li&gt;Free to use&lt;/li&gt;
  &lt;li&gt;Supports multiple languages (Java, JavaScript, Objective C,
.NET, PHP, Python, Ruby, and soon to come… Swift)&lt;/li&gt;
  &lt;li&gt;Can be used with Android and iOS&lt;/li&gt;
  &lt;li&gt;Tests the same application file that you plan to submit to the App Store/Google Play. This is a bonus for ensuring that the final build for your app is fully functional.&lt;/li&gt;
  &lt;li&gt;Has a large community&lt;/li&gt;
  &lt;li&gt;Can be used with Cucumber&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With iOS, running tests simultaneously with a simulator requires a separate iOS device for each simulator. Using a cloud based continuous integration service such as Sauce Labs can fix this issue.&lt;/li&gt;
  &lt;li&gt;Not compatible with Android API’s lower than 16. They use Selendroid to fix this but this results in more complexity.&lt;/li&gt;
  &lt;li&gt;Challenging to implement certain gestures&lt;/li&gt;
  &lt;li&gt;A lot more overhead for developers to learn on top of the development process&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xctest&quot;&gt;XCTest&lt;/h2&gt;
&lt;p&gt;This framework is now baked into Xcode. Developers can simply press a record button and build their UI tests with minimal effort.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very little overhead for developers to learn&lt;/li&gt;
  &lt;li&gt;Used with native iOS languages&lt;/li&gt;
  &lt;li&gt;Allows for continuous integration&lt;/li&gt;
  &lt;li&gt;Faster than many external frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No cross platform support&lt;/li&gt;
  &lt;li&gt;Restricted to Objective C or Swift&lt;/li&gt;
  &lt;li&gt;Is very new and contains some bugs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;do-i-choose-appium-or-xcode&quot;&gt;Do I choose Appium or Xcode?&lt;/h2&gt;
&lt;p&gt;First it depends on your preferences. If you’re willing to learn a new framework like Appium and possibly a new language in exchange for cross platform support, then Appium may be for you. It allows you to reuse code and it minimizes the work on the testing team because the language is the same across multiple test cases and multiple platforms. However, if the developers not on the testing team are required to write acceptance tests, then Appium may have an unrealistic learning curve.&lt;/p&gt;

&lt;p&gt;Learning Appium requires knowledge of how to use Selenium and the WebDriver protocol which in itself is a lot to ask of the development team. I for one would be much more comfortable working in the Xcode environment with XCTest rather than using Appium.&lt;/p&gt;

&lt;h2 id=&quot;creating-readable-tests-with-appium-and-xcode&quot;&gt;Creating Readable Tests with Appium and Xcode&lt;/h2&gt;
&lt;p&gt;With a testing framework, it’s important that tests are clearly understandable by people from all facets of the development process. It’s also important that developers are able to write tests in an intuitive way. Both Appium and Xcode offer support in this area.&lt;/p&gt;

&lt;p&gt;Below is an example for writing tests in Appium using &lt;a href=&quot;https://cucumber.io/&quot;&gt;Cucumber&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Feature: Class search
  To allow a user to find a classes taught by a professor,
  the school must offer an easy way for users to filter
  classes by professor name.

  Scenario: Search classes by professor
    Given I have a list of classes
    When I search classes taught by professor Doe
    Then I find professor Doe is teaching Algorithms and Software
    Development I
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Clean right? Now imagine if writing tests was as simple as using common Engish as shown above. Again, this is easy with Appium. Of course there is some work to tie plain english with code, but it’s not difficult to do. Xcode doesn’t offer a solid solution for integrating something like Cucumber but there is a new framework available that takes advantage of Swift, Gherkin, and Xcode’s XCTest. You can see that plugin &lt;a href=&quot;https://github.com/net-a-porter-mobile/XCTest-Gherkin&quot;&gt;here&lt;/a&gt;. Now tests in Xcode can look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func testSearchByProfessor() {
        Given(&quot;I have a list of classes&quot;)
        When(&quot;I search for classes taught by professor Doe&quot;)
        Then(&quot;I find professor Doe is teaching Algorithms
        and Software Development&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Still looks clean right? This was written in Xcode using Swift! With the ability to write clean tests in Xcode, developers can now use Xcode’s record option to capture UI actions and then wrap those actions with Gherkin. This is simple to do and has a very small learning curve for developers that have prior iOS experience.&lt;/p&gt;

&lt;p&gt;If you are thinking about writing acceptance tests using Xcode and the TDD model, I also recommend you check out &lt;a href=&quot;https://github.com/kif-framework/KIF&quot;&gt;KIF&lt;/a&gt;. KIF makes it easier for testers and developers using Xcode and it can be combined with the Gherkin framework shown above! With the power of Gherkin and KIF, Xcode is on it’s way to making acceptance testing much easier for developers and testers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Personally, after researching Appium and Xcode, I found Xcode to be the winner from the developer perspective. As a mobile developer, I want to spend as little amount of time testing as possible. At the same time, I want to ensure the tests I write are complete. If I use Xcode, then I have the luxury of working in a familiar environment with a language that I know well. Adding a few frameworks such as Gherkin and KIF is simple as they easily integrate with Xcode. Not only are these frameworks simple to use, Xcode is obviously stepping up their support for acceptance testing and I’m sure XCTest will only improve in the future.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://shashikantjagtap.net/ios-automated-testing-in-the-bdd-with-appium-cucumber-on-mac-osx/&lt;/li&gt;
  &lt;li&gt;http://www.3pillarglobal.com/insights/appium-a-cross-browser-mobile-automation-tool&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift vs. Objective C</title>
   <link href="http://bradleygolden.github.io/post/2016/02/22/swift-vs-objective-c/"/>
   <updated>2016-02-22T00:00:00-06:00</updated>
   <id>http://bradleygolden.github.io/post/2016/02/22/swift-vs-objective-c</id>
   <content type="html">&lt;iframe src=&quot;https://drive.google.com/file/d/0B3O6dpa-XnSYUjJyQ2lCd2tHSnM/preview&quot; width=&quot;468&quot; height=&quot;202&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;So you’re interested in developing software in Swift or Objective-C, but how do you know which to choose? I work at an enterprise level company that has recently researched this question, and I want to briefly share with you my findings so that you can make an informed decision.&lt;/p&gt;

&lt;p&gt;I will begin with a simple Q &amp;amp; A.&lt;/p&gt;

&lt;h4 id=&quot;can-i-write-a-complete-swift-framework-without-depending-on-objective-c&quot;&gt;Can I write a complete Swift framework without depending on Objective-C?&lt;/h4&gt;
&lt;p&gt;Yes, many popular apps such as lyft, Yahoo Weather, and LinkedIn are now entirely built in Swift. The process for creating a framework is similar except Objective-C is now replaced with Swift.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&quot;http://www.apple.com/swift/&quot;&gt;http://www.apple.com/swift/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;are-swift-frameworks-compatible-with-apps-written-in-objective-c&quot;&gt;Are Swift frameworks compatible with app’s written in Objective-C?&lt;/h4&gt;
&lt;p&gt;Yes, Swift frameworks are compatible with apps previously written in Objective-C with some caveats. The following Swift only features will not be available to Objective-C apps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generics&lt;/li&gt;
  &lt;li&gt;Tuples&lt;/li&gt;
  &lt;li&gt;Enumerations defined in Swift without Int raw value type&lt;/li&gt;
  &lt;li&gt;Structures defined in Swift&lt;/li&gt;
  &lt;li&gt;Top-level functions defined in Swift&lt;/li&gt;
  &lt;li&gt;Global variables defined in Swift&lt;/li&gt;
  &lt;li&gt;Type aliases defined in Swift&lt;/li&gt;
  &lt;li&gt;Swift-style variadics&lt;/li&gt;
  &lt;li&gt;Nested types&lt;/li&gt;
  &lt;li&gt;Curried functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reference: &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-ID136&quot;&gt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-ID136&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&quot;&gt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;are-there-any-popular-sdks-or-open-source-libraries-already-written-in-swift-eg-alamofire&quot;&gt;Are there any popular SDK’s or open source libraries already written in Swift? (e.g. Alamofire)&lt;/h4&gt;
&lt;p&gt;Yes, 1/3 of the SDK’s found on &lt;a href=&quot;https://medium.com/app-coder-io/27-ios-open-source-libraries-to-skyrocket-your-development-301b67d3124c#.2ypapea5x&quot;&gt;this website&lt;/a&gt; are written in Swift.&lt;/p&gt;

&lt;h4 id=&quot;what-are-the-downsides-of-using-sdks-written-in-swift&quot;&gt;What are the downsides of using SDK’s written in Swift?&lt;/h4&gt;
&lt;p&gt;Some features in Swift are not available to Objective-C as mentioned earlier. Also, because Swift is a fairly new language, the support for it is not as thorough as Objective-C. This is changing though!&lt;/p&gt;

&lt;h4 id=&quot;is-swift-compatible-with-cocoapods&quot;&gt;Is Swift compatible with CocoaPods?&lt;/h4&gt;
&lt;p&gt;Yes, you can use any pod written in Objective-C, Swift or both with an app written in Objective-C, Swift, or both. Just remember that some Swift features are not compatible with Objective-C.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&quot;&gt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;whats-going-to-be-changed-in-swift-in-the-near-future&quot;&gt;What’s going to be changed in Swift in the near future?&lt;/h4&gt;
&lt;p&gt;All information regarding upcoming changes to Swift can be found here: &lt;a href=&quot;https://github.com/apple/swift-evolution&quot;&gt;https://github.com/apple/swift-evolution&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After asking these questions myself, I determined this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There are still many companies out there using Objective-C. With that said, I’ve decided to continue to write SDK’s in Objective-C, because I know that they will be compatible with both Objective-C apps and Swift apps. This is not the case however if we decide to write SDK’s solely in Swift.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If I’m building an application that will have zero possible Objective-C dependencies, then Swift is a sure way to go because of its clean style and easy to learn syntax.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I will reassess this decision in the next year as the next Swift versions are introduced and I can determine that my clients will no longer need Objective-C frameworks.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Chicago Salaries iOS Application</title>
   <link href="http://bradleygolden.github.io/post/2016/01/14/chicago-salaries-ios-application/"/>
   <updated>2016-01-14T00:00:00-06:00</updated>
   <id>http://bradleygolden.github.io/post/2016/01/14/chicago-salaries-ios-application</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Over the winter break, my good friend Oliver San Juan and I wanted to make the best of our time by releasing an application into the app store. After many hours of work we finally completed ChiSalary and had it successfully approved by Apple! You can click the links below to view details about the application.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.tinyurl.com/chisalary&quot; target=&quot;_blank&quot;&gt;View in iTunes Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://chisalaryapp.com&quot; target=&quot;_blank&quot;&gt;View github repo&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;about-chisalary&quot;&gt;About ChiSalary&lt;/h2&gt;
&lt;p&gt;ChiSalary is an iOS application that allows you to view the salaries of all Chicago Employees using simple search methods. The app as of right now is in the app store and freely available for anyone to use.&lt;/p&gt;

&lt;h2 id=&quot;preview&quot;&gt;Preview&lt;/h2&gt;
&lt;iframe src=&quot;https://drive.google.com/file/d/0B3O6dpa-XnSYZ0ZtX0w5U1F3aDQ/preview&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;interested-in-contributing&quot;&gt;Interested in contributing?&lt;/h2&gt;
&lt;p&gt;We’ve decided to open source our app. We welcome anyone willing to contribute new ideas to the project. If you’re interested, please submit a pull request on github or contact us at chisalaryapp@gmail.com.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Asynchronous UI Testing with Xcode</title>
   <link href="http://bradleygolden.github.io/post/2016/01/09/asynchronous-ui-testing-with-xcode/"/>
   <updated>2016-01-09T00:00:00-06:00</updated>
   <id>http://bradleygolden.github.io/post/2016/01/09/asynchronous-ui-testing-with-xcode</id>
   <content type="html">&lt;p&gt;When UI testing with Xcode 7’s new XCTest framework, you may find yourself in need a of a reliable way to make asynchronous calls when testing various components. I’ve created a simple application for you to use to see this concept in action.&lt;/p&gt;

&lt;p&gt;Before you scroll below or download the app, first I will give you a big picture of what the scenario is. I have an application that currently displays a submit button. Upon pressing the submit button, a request that takes between 1 and 5 seconds occurs. After the request is complete, a contact button becomes available.&lt;/p&gt;

&lt;iframe src=&quot;https://drive.google.com/file/d/0B3O6dpa-XnSYc3h4cnZWT0hZZlU/preview&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;What I’d like to do is simulate a UI test by pressing the submit button and then press the contact button. The only issue is that the submit button can take any time between 1 and 5 seconds! So what should I do?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Locating The Problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First &lt;strong&gt;&lt;a href=&quot;https://github.com/bradleygolden/async-ui-testing-xcode-demo&quot;&gt;download the app here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the app is downloaded, navigate to “SubmitViewController.m”&lt;/p&gt;

&lt;p&gt;You’ll find the following method in that file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (void)submitOperation {

    int delayAmount = arc4random_uniform(4) + 1; // delay for a random amount between 1 and 5 seconds

    [activityView startAnimating];

    [NSThread sleepForTimeInterval:delayAmount]; // simulate time to reach out to server

    // upon completion of sleep
    dispatch_async(dispatch_get_main_queue(), ^{
        [activityView stopAnimating];
        [self performSegueWithIdentifier:@&quot;contactSegue&quot; sender:NULL];
    });
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method simulates some call to a server that takes an indeterminate amount of time. This is what makes UI testing slightly more complicated as we now have to account for async calls.&lt;/p&gt;

&lt;p&gt;Take some time to look over the code. This tutorial assumes you know the basics of iOS development.&lt;/p&gt;

&lt;p&gt;Run the app with &lt;code&gt;CMD-R&lt;/code&gt; to get an idea how this basic app works.&lt;/p&gt;

&lt;p&gt;Now that you have an idea as to how this works, let’s move on to some basic UI testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Wrong Approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Navigate to “Async_UI_TestingUITests.m”&lt;/p&gt;

&lt;p&gt;You’ll find 3 tests.
 - testButton
 - testButtonSync
 - testButtonAsync&lt;/p&gt;

&lt;p&gt;Go ahead and run the tests with &lt;code&gt;CMD-B + CMD-U&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now run the tests a few times. What did you notice?&lt;/p&gt;

&lt;p&gt;2 of the 3 tests should pass consistently but one of the tests will fail. Why is that?&lt;/p&gt;

&lt;p&gt;The issue is in the testButton method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (void)testButton {
    XCUIApplication *app = [[XCUIApplication alloc] init];

    XCUIElement *contactButton = app.buttons[@&quot;contactButton&quot;];

    // tap the submit button
    [app.buttons[@&quot;submitButton&quot;] tap];

    // press the contact button
    [contactButton tap];
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method assumes that the submit button has no delay but in reality it may have a delay between 1-5 seconds!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Naive Approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now take a look at the testButtonSync method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (void)testButtonSync {
    XCUIApplication *app = [[XCUIApplication alloc] init];

    XCUIElement *contactButton = app.buttons[@&quot;contactButton&quot;];

    // tap the submit button
    [app.buttons[@&quot;submitButton&quot;] tap];

    // wait 10 seconds to segue to the next view
    [NSThread sleepForTimeInterval:10];

    // press the contact button
    [contactButton tap];
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that the tester decided to fix the issue of not knowing the response time by delaying the app by 10 seconds. This works but now you’ll have to wait for 10 seconds every time you run the test simulator!&lt;/p&gt;

&lt;p&gt;We want a way to click the button as soon as it’s available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Smart Approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now take a look at the testButtonAsync method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (void)testButtonAsync {
    XCUIApplication *app = [[XCUIApplication alloc] init];

    XCUIElement *contactButton = app.buttons[@&quot;contactButton&quot;];

    NSPredicate *exists = [NSPredicate predicateWithFormat:@&quot;exists == 1&quot;];

    [app.buttons[@&quot;submitButton&quot;] tap]; // tap the submit button

    // perform async loop, waiting for the object specified to appear
    [self expectationForPredicate:exists evaluatedWithObject:contactButton handler:nil];

    [self waitForExpectationsWithTimeout:10 handler:nil]; // wait no longer than 10 seconds for the request to go through

    [contactButton tap]; // this object has been found, perform this action
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, I am using a predicate to check when &lt;code&gt;contactButton&lt;/code&gt; is available:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[self expectationForPredicate:exists evaluatedWithObject:contactButton handler:nil];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I then wait &lt;em&gt;at most&lt;/em&gt; 10 seconds for the contact button to appear:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[self waitForExpectationsWithTimeout:10 handler:nil];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the button appears the contact button will be tapped immediately!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Three Random Slices of Wisdom for Student Developers</title>
   <link href="http://bradleygolden.github.io/post/2016/01/08/three-random-slices-of-wisdom-for-student-developers/"/>
   <updated>2016-01-08T00:00:00-06:00</updated>
   <id>http://bradleygolden.github.io/post/2016/01/08/three-random-slices-of-wisdom-for-student-developers</id>
   <content type="html">&lt;p&gt;As I’m writing this post, I’m entering my last semester as a senior majoring in Computer Science at the University of Illinois at Chicago. I feel it’s important for me to guide you because I’ve had the privilege to make A LOT of mistakes over the last 4 years as a college student/aspiring developer. My wish for you is that you take something from this post that helps you on your path to success.&lt;/p&gt;

&lt;p&gt;Take note, this post is not only for students! You may very well find some useful information here. Also, please be sure to comment below with your advice, feedback, questions, etc.&lt;/p&gt;

&lt;p&gt;Now enough chatter, let’s begin…&lt;/p&gt;

&lt;h2 id=&quot;learn-the-c-programming-language-at-least-the-basics&quot;&gt;1. Learn the C Programming Language (At least the basics)&lt;/h2&gt;

&lt;p&gt;If you’re saying to yourself, “Learning C is a waste of my time”, then I suggest you read on.&lt;/p&gt;

&lt;p&gt;You can think of C as the Latin language of the programming world. If you learn Latin, it’s really easy to learn new Western based languages as they all have common similarities.&lt;/p&gt;

&lt;p&gt;Much like French and English have roots in Latin, many modern programming languages today have roots in C. For example, do you or have you ever used an iPhone or Mac? Have you played video games? Minecraft maybe? I’m guessing that most likely you answered yes to one of these questions. If so, then you have unknowingly been a user of someone who used a C based language.&lt;/p&gt;

&lt;p&gt;Another reason to use C is that many modern languages abstract very crucial concepts that are very important for you to know as a programmer. For example, basic memory management is something that every programmer should at least be aware of. The issue with modern languages like Python or Java is that they manage memory for you and cannot be utilized in certain sectors of the software world where resources are scarce. Also, as motivation for you as a job hunter, many top companies such as Google and Microsoft want and require you to know how to manage memory. You just can’t get around without learning C.&lt;/p&gt;

&lt;p&gt;For starters, I recommend you start with &lt;strong&gt;&lt;a href=&quot;http://c.learncodethehardway.org/book/&quot;&gt;Learn C The Hard Way&lt;/a&gt;&lt;/strong&gt;. The “Hard Way” series is a great resource for learning any language. It’s both free and much more enjoyable to read than 99% of the textbooks you’ll find out there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://c.learncodethehardway.org/book/&quot;&gt;&lt;img src=&quot;http://t2.gstatic.com/images?q=tbn:ANd9GcR3c8vCiW8JbLKPa28ioUTPqeZBszCz2oFb8hBe8-kFZqHmpUch&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;learn-to-manage-your-finances-now&quot;&gt;2. Learn to Manage Your Finances, NOW&lt;/h2&gt;

&lt;p&gt;If that voice in the back of your head has ever said, “I don’t have enough money to manage now, there’s no point”, think again. Even if you have a penny to your name, I think you should think very carefully how you spend that penny.&lt;/p&gt;

&lt;p&gt;As a student, that very voice I just mentioned was my excuse for not managing my finances carefully for the last 3 1/2 years in college. I told myself, “I’ll wait until I’m finished with college and I begin making the real dough before I think about money management.” I’ll admit, that was a serious mistake on my part. I don’t know how much money I could have saved or spent in meaningful places because I didn’t carefully watch where I spent it.&lt;/p&gt;

&lt;p&gt;I’ve come to a stark realization that sounds obvious to me now but it wasn’t so obvious a few years ago. My realization was this, “If I don’t know how or I don’t try to manage what little financial income I have now, what will make managing my (hopefully) larger career income any easier later on?” In fact, it will probably be much harder to manage the income I make from my career because I don’t have the required experience! This is the typical grass is greener B.S. mentality. The grass is not greener, start now.&lt;/p&gt;

&lt;p&gt;I read a great book that is specifically addressed towards the younger audience. I highly recommend it, even if you are a dirt poor student living off of Top Ramen.&lt;/p&gt;

&lt;h5 id=&quot;i-will-teach-you-to-be-rich-by-ramit-sethihttpsreadamazoncomkpembedasinb004wl4bw6previewnewtablinkcodekperefcmswrkbdpfqyjwb1a8qs9p&quot;&gt;&lt;a href=&quot;https://read.amazon.com/kp/embed?asin=B004WL4BW6&amp;amp;preview=newtab&amp;amp;linkCode=kpe&amp;amp;ref_=cm_sw_r_kb_dp_FqYJwb1A8QS9P&quot;&gt;I Will Teach You To Be Rich by Ramit Sethi&lt;/a&gt;&lt;/h5&gt;

&lt;iframe type=&quot;text/html&quot; width=&quot;336&quot; height=&quot;550&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; style=&quot;max-width:100%&quot; src=&quot;https://read.amazon.com/kp/card?asin=B004WL4BW6&amp;amp;preview=inline&amp;amp;linkCode=kpe&amp;amp;ref_=cm_sw_r_kb_dp_FqYJwb1A8QS9P&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;find-a-higher-purpose-in-life&quot;&gt;3. Find a Higher Purpose in Life&lt;/h2&gt;

&lt;p&gt;Oh no, here comes the Jesus talk.&lt;/p&gt;

&lt;p&gt;I’m going to spare you any religious dogma as I grew up with enough of it around me. If you already have some higher focus in a religion, non-profit organization, cult (cough cough Scientology), etc., good for you. I still want you to answer this question, what is your purpose in life?&lt;/p&gt;

&lt;p&gt;If you don’t have an answer to this fundamental question, life may just flash before your eyes and before you know, you’ll be dead. Yes, I did go there.&lt;/p&gt;

&lt;p&gt;My suggestion for you is this, discover a purpose that allows you to feel that you’re giving a meaningful contribution back to the world.  Some examples of people who have embodied that concept are Bach, Gandhi, and Thomas Jefferson.&lt;/p&gt;

&lt;p&gt;However, you don’t have to be legendary or widely popular. If your goal is to be a stay at home dad and raise your kids, great! So long as you feel that you’re positively contributing to the world and other peoples happiness, that’s all that matters.&lt;/p&gt;

&lt;p&gt;If you’re like many people out there and have no clue what your purpose is, I’d like to give you a recommendation. I recommend &lt;strong&gt;&lt;a href=&quot;https://read.amazon.com/kp/embed?asin=B002SR2PXI&amp;amp;preview=newtab&amp;amp;linkCode=kpe&amp;amp;ref_=cm_sw_r_kb_dp_RLYJwb0EEK7J6&quot;&gt;The Tao of Abundance by Laurence G. Boldt&lt;/a&gt;&lt;/strong&gt;. The author doesn’t directly talk about purpose but you will find yourself more connected to your friends, family, coworkers, etc. I truly believe that is the best place to start. Once you are more in tune with how you operate and your surroundings, I believe you can tap in to the natural wisdom that we all are born with. And who knows, maybe the answer will naturally come to you without much effort?&lt;/p&gt;

&lt;h5 id=&quot;the-tao-of-abundance-by-laurence-g-boldthttpsreadamazoncomkpembedasinb002sr2pxipreviewnewtablinkcodekperefcmswrkbdprlyjwb0eek7j6&quot;&gt;&lt;a href=&quot;https://read.amazon.com/kp/embed?asin=B002SR2PXI&amp;amp;preview=newtab&amp;amp;linkCode=kpe&amp;amp;ref_=cm_sw_r_kb_dp_RLYJwb0EEK7J6&quot;&gt;The Tao of Abundance by Laurence G. Boldt&lt;/a&gt;&lt;/h5&gt;
&lt;iframe type=&quot;text/html&quot; width=&quot;336&quot; height=&quot;550&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; style=&quot;max-width:100%&quot; src=&quot;https://read.amazon.com/kp/card?asin=B002SR2PXI&amp;amp;preview=inline&amp;amp;linkCode=kpe&amp;amp;ref_=cm_sw_r_kb_dp_RLYJwb0EEK7J6&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 

</feed>
